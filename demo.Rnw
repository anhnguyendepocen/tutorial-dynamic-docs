\documentclass{article}
\usepackage{natbib}
\usepackage[unicode=true]{hyperref}
\usepackage{geometry}
\geometry{tmargin=1in,bmargin=1in,lmargin=1in,rmargin=1in}

<<setup, include=FALSE>>=
# include any code here you don't want to show up in the document,
# e.g., package and dataset loading

require(ggplot2)
set.seed(0)

# also a good place to set global chunk options

library(knitr) # need this for opts_chunk command
opts_chunk$set(fig.width = 5, fig.height = 5)
# if we wanted chunks by default not to be evaluated
# opts_chunk$set(eval = FALSE)  
@ 


\begin{document} 
\title{An example Rtex file\\Illustrating use of R, bash, and Python code chunks}
\author{Christopher Paciorek}
\date{August 2015}

\maketitle

\section{How to generate a document from this file}

In bash, you can run this document through the \emph{knitr} package for R to generate a PDF. I don't know of a way to generate HTML directly, but there are tools for converting between various file formats, such as \emph{pandoc}.

<<compile-bash, eval=FALSE, engine='bash'>>=
Rscript -e "library(knitr); knit2pdf('demo.Rnw')"  
@ 


Or, start R and run this:

<<compile-R, eval=FALSE>>=
library(knitr); knit2pdf('demo.Rtex')  
@ 

\section{LaTeX}

This document will focus on embedding code and not on standard LaTeX. For a quick introduction to LaTeX, see \href{https://github.com/berkeley-scf/tutorial-latex-intro}{our tutorial}.

The \texttt{knit2pdf} command processes the Rtex format, evaluating the R code chunks, and creating a standard LaTeX file with the code snippets and output created by the code properly formatted as standard LaTeX. 

\section{Embedding equations using LaTeX}

The knitr Rtex format is built on LaTeX, so you can just use LaTeX functionality.

Here is an inline equation $f(x) = \int f(y, x) dy$.

Here's a displayed equation
$$
f_\theta(x) = \int f_\theta(y, x) dy.
$$ 


\section{Embedding R code}

Here's an R code chunk

<<r-chunk1>>=
a <- c(7, 3)
mean(a)
b <- a + 3
mean(b)
@
\noindent Unfortunately, we need to use the \emph{noindent} command to prevent the text after a chunk from being considered as a new paragraph. Here's another chunk: 

<<r-chunk2>>=
mean(b)
@

When running R code, output is printed interspersed with the code, as one would generally want. Also, later chunks have access to result from earlier chunks (i.e., state is preserved between chunks). 

Let's make a plot:
<<r-plot, fig.height = 3>>=
hist(rnorm(20))
@

And here's some inline R code: What is 3 plus 5? \Sexpr{3+5}.

You have control over whether code in chunks is echoed into the document and evaluated using the `include`, `echo`, and `eval` flags.

<<include, include=FALSE>>=
cat("this code is evaluated but nothing is printed in the document")
library(fields) 
# fields package should now be loaded for use by later chunks
@

<<echo, echo=FALSE>>=
cat("this code is not echoed to the screen but is evaluated")
@

<<eval, eval=FALSE>>=
cat("this code is not evaluated but is printed")
@

Intensive calculations can be saved using the `cache=TRUE' tag so they don't need to be rerun every time you compile the document. 

<<slow-step, cache=TRUE>>=
mean(rnorm(5e7))
@

\section{Embedding bash and Python code}
 
\subsection{bash}
A bash chunk:
<<bash-chunk1, engine='bash'>>=
df -h
cd /tmp
pwd
@

Unfortunately, output from bash chunks occurs after all the code is printed and state is not preserved between chunks.

<<bash-chunk2, engine='bash'>>=
pwd  # result would be /tmp if state were preserved
@

Inline bash code won't work.

\subsection{Embedding Python code}

<<py-chunk1, engine='python'>>=
import numpy as np
x = np.array((3, 5, 7))
print(x.sum())
x.min()  # note not printed
@

<<py-chunk2, engine='python'>>=
try:
        print(x[0])
except NameError:
       print('x does not exist')
@

As with bash chunks, all output is grouped after the code is printed and state is not preserved between chunks. Also, you need explicit print statements; you won't see what would normally be printed to the screen.

There is no facility for inline Python code evaluation.

\section{Reading code from an external file}

It's sometimes nice to draw code in from a separate file.

<<read-chunk, echo=FALSE>>=
library(knitr)
read_chunk('demo.R')
@

<<external_chunk_1>>=
@

<<external_chunk_2>>=
@

\section{Formatting of long lines of code and of output}

\subsection{R code}

Having long lines be nicely formatted and other aspects of formatting can be a challenge. Also, results can differ depending on your output format (e.g., PDF vs. HTML). In general the code in this section will often overflow the page width in PDF but not in HTML.

<<r-long>>=
b <- "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively"
b <- "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics."
tmp <- "In addition to developing fundamental theory and methodology, we are actively"
b <- paste0(b, tmp)
# Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively

# this should work but doesn't always
cat(b, fill = TRUE)

tmp1 <- 7
# there should be a blank line after this

tmp3 <- 9
tmp4 <- 11
# a work around if you can't insert a blank line easily
# is just to put an empty comment line instead
# there should be two lines with just comment characters next:
#
#
# that creates some space

vecLongName = rnorm(100)
a = length(mean(5 * vecLongName + vecLongName - exp(vecLongName) + vecLongName * vecLongName, na.rm = TRUE))
a = length(mean(5 * vecLongName + vecLongName)) # this is a comment that goes over the line by a good long ways
a = length(mean(5 * vecLongName + vecLongName - exp(vecLongName) + vecLongName, na.rm = TRUE)) # this is a comment that goes over the line by a good long long long long long long long long ways

# long output usually is fine
rnorm(100)
@

Sometimes you can format things manually for better results. You may need to tag the chunk with `tidy=FALSE`, but I have not here.

<<r-long-tidy>>=
# breaking up a string
b <- "Statistics at UC Berkeley: We are a community engaged in research
 and education in probability and statistics. In addition to developing 
fundamental theory and methodology, we are actively"

# breaking up a comment
# Statistics at UC Berkeley: We are a community engaged in research and
# education in probability and statistics. In addition to developing 
# fundamental theory and methodology, we are actively

# breaking up code lines
vecLongName = rnorm(100)
a <- length(mean(5 * vecLongName + vecLongName - exp(vecLongName) + 
  vecLongName * vecLongName, na.rm = TRUE))
a <- length(mean(5 * vecLongName + vecLongName)) # this is a comment that 
    # goes over the line by a good long ways
a <- length(mean(5 * vecLongName + vecLongName - exp(vecLongName) + 
    vecLongName, na.rm = TRUE)) # this is a comment that goes over the line 
    # by a good long long long long long long long long ways
@

\subsection{bash code}


Now in bash, we have similar problems with line endings but bash allows us to use a backslash to break lines of code. The one thing that doesn't help us with is long lines of output. Also, we need to break long comments ourselves. And note that all results are printed at the end of a code chunk instead of interspersed immediately after the command generating the output.

<<bash1, engine='bash'>>=
echo "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively" > tmp.txt
  
echo "Second try: Statistics at UC Berkeley: We are a community engaged \
in research and education in probability and statistics. In addition to \
developing fundamental theory and methodology, we are actively" \
>> tmp.txt

cat tmp.txt
@

We also have problems with long comments, so would need to manually format them.

<<bash2, engine='bash'>>=
# the following long comment line is not broken in my test:
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl

# instead manually break it:
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla 
# lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa 
# adlfjaf jkladf afdl
@

\subsection{Python code}

There may be trouble with lines overflowing in Python output too.

<<test-python, engine='python'>>=
# this overflows the page in some contexts
b = "asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl"
print(b)

# this code overflows the page in some contexts
zoo = {"lion": "Simba", "panda": None, "whale": "Moby", "numAnimals": 3, "bear": "Yogi", "killer whale": "shamu", "bunny:": "bugs"}
print(zoo)

# instead manually break the code
zoo = {"lion": "Simba", "panda": None, "whale": "Moby", 
      "numAnimals": 3, "bear": "Yogi", "killer whale": "shamu", 
      "bunny:": "bugs"}
print(zoo)

# long comments overflow too
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl

# and the long output that will appear next in the resulting document (produced from the evaluation of the code above) also overflows:
@


\section{References}

We'll just see how you use BibTeX style references.  \cite{Bane:etal:2008} proposed a useful method. This was confirmed \citep{Cres:Joha:2008}.

The list of references is placed at the end of the document. 


\bibliographystyle{plainnat}
\bibliography{refs}

\end{document}
